class PlayerController : ZilchComponent
{
    [Property]
    var CurrentFloor:Integer = 1;
    var HUDFloorObject:Cog = null;
    var HUDDamage:Cog = null;
    var RideElevator:Boolean = false;
    var LeavingElevator:Boolean = false;
    var InElevator:Boolean = false;
    var Cutscene:Boolean = false;
    var Health:Real = 100;
    var TrueHealth:Real = 100;
    var InitTrans:Real3 = Real3(0,0,0);
    var StartTrans:Real3 = Real3(0,0,0);
    var NearestElevator:Cog = null;
    var NearestDoor:Cog = null;
    var HasGreenKey:Boolean = false;
    var Timer:Integer = 0;
    function Initialize(init : CogInitializer)
    {
        this.HUDFloorObject = this.LevelSettings.HudCreator.HudSpace.FindObjectByName("FloorText");
        this.HUDDamage = this.LevelSettings.HudCreator.HudSpace.FindObjectByName("HUDDamage");
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionPersisted, this.OnCollisionPersisted);

    }
    function OnCollisionPersisted(event : CollisionEvent)
    {
        if(event.OtherObject.Name == "HurtZone")
        {
            if(this.Health > 1.5)
            {
                this.Health -= 1.2;
                this.LevelSettings.CameraViewport.Camera.CameraController.CameraShake(4.0);
                var random = new Random();
                if(random.Range(0,100) > 95)
                {
                    this.Space.SoundSpace.PlayCue(SoundCue.Find("Hurt"));
                }
            }
        }
        
    }
    function OnLogicUpdate(event : UpdateEvent)
    {
        //Use Elevator
        if(this.InElevator && Zero.Keyboard.KeyIsPressed(Keys.Enter) && !this.NearestDoor.DoorManager.Open && !this.NearestElevator.ElevatorBehavior.ElevatorMoving)
        {
            this.UseElevator();
        }
        //Exit Elevator
        if(this.InElevator && Zero.Keyboard.KeyIsPressed(Keys.Space) && !this.NearestElevator.ElevatorBehavior.ElevatorMoving)
        {
            this.NearestDoor.DoorManager.DoorOpenExit();
        }
        if(this.CurrentFloor == 11)
        {
            this.HUDFloorObject.SpriteText.Text = "R";
        }
        else if(this.CurrentFloor == 0)
        {
            this.HUDFloorObject.SpriteText.Text = "B";
        }
        else
        {
            this.HUDFloorObject.SpriteText.Text = "F`this.CurrentFloor`";
        }
        this.HUDDamage.Sprite.Color = Real4(1,1,1,1-(this.Health/100.0));
        if(this.Health < 99)
        {
            this.Health += 0.9;
        }
        if(this.Health < 2)
        {
            this.TrueHealth -= 5.0;
        }
        if(this.TrueHealth < 0)
        {
            if(this.LevelSettings.HudCreator.HudSpace.FindObjectByName("GameOver") == null)
            {
                this.LevelSettings.HudCreator.HudSpace.CreateAtPosition(Archetype.Find("WhiteOutEnd"), Real3(0,0,0.2));
                this.LevelSettings.HudCreator.HudSpace.CreateAtPosition(Archetype.Find("GameOver"), Real3(0,5,5));
            }
            this.Timer += 1;
            this.HUDDamage.Sprite.Color = Real4(1,1,1,1);
            this.Cutscene = true;
        }
        if(this.Timer == 350)
        {
            this.Space.ReloadLevel();
        }
        
    }
    function EnterElevator()
    {
        this.NearestElevator.ElevatorBehavior.StartTrans = this.NearestElevator.Transform.WorldTranslation;
        this.StartTrans = this.Owner.Transform.WorldTranslation;
        var seqA = Action.Sequence(this.Owner.Actions);
        Action.Property(seqA, @this.Cutscene, true, 0.0, Ease.Linear);
        Action.Property(seqA, @this.Owner.Transform.WorldTranslation, this.NearestElevator.Transform.WorldTranslation + Real3(0, 1, -3), 1.0, Ease.Linear);
        Action.Call(seqA, this.NearestDoor.DoorManager.DoorClose);
        Action.Property(seqA, @this.InElevator, true, 0.0, Ease.Linear);
        Action.Property(seqA, @this.Cutscene, false, 0.0, Ease.Linear);
        Action.Call(seqA, this.SelectAFloorText);
    }
    function ExitElevator()
    {
        this.NearestElevator.ElevatorBehavior.StartTrans = this.NearestElevator.Transform.WorldTranslation;
        this.StartTrans = this.Owner.Transform.WorldTranslation;
        var seqA = Action.Sequence(this.Owner.Actions);
        Action.Property(seqA, @this.Cutscene, true, 0.0, Ease.Linear);
        Action.Property(seqA, @this.LeavingElevator, true, 0.0, Ease.Linear);
        Action.Property(seqA, @this.Owner.Transform.WorldTranslation, this.NearestElevator.Transform.WorldTranslation + Real3(0, 1, 11.29063), 1.0, Ease.Linear);
        Action.Property(seqA, @this.InElevator, false, 0.0, Ease.Linear);
        Action.Call(seqA, this.NearestDoor.DoorManager.DoorClose);
        Action.Property(seqA, @this.LeavingElevator, false, 0.0, Ease.Linear);
        Action.Property(seqA, @this.Cutscene, false, 0.0, Ease.Linear);
    }
    function AbortElevator()
    {
        this.NearestElevator.ElevatorBehavior.StartTrans = this.NearestElevator.Transform.WorldTranslation;
        this.StartTrans = this.Owner.Transform.WorldTranslation;
        var seqA = Action.Sequence(this.Owner.Actions);
        Action.Property(seqA, @this.Cutscene, true, 0.0, Ease.Linear);
        Action.Property(seqA, @this.LeavingElevator, true, 0.0, Ease.Linear);
        Action.Property(seqA, @this.Owner.Transform.WorldTranslation, this.NearestElevator.Transform.WorldTranslation + Real3(0, 1, 11.29063), 1.0, Ease.Linear);
        Action.Property(seqA, @this.InElevator, false, 0.0, Ease.Linear);
        Action.Property(seqA, @this.LeavingElevator, false, 0.0, Ease.Linear);
        Action.Property(seqA, @this.Cutscene, false, 0.0, Ease.Linear);
    }
    function UseElevator()
    {
        this.NearestElevator.ElevatorBehavior.GotoFloor(this.NearestElevator.ElevatorBehavior.SelectFloor);
    }
    function SelectAFloorText()
    {
        Console.WriteLine("Choose a Floor.");
        this.LevelSettings.ContextText.SetString("Choose a Floor with the Arrow Keys. \n Then Press Enter");
        
    }
}
